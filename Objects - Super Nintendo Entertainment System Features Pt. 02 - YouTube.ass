[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: Objects - Super Nintendo Entertainment System Features Pt. 02.MP4
Video File: Objects - Super Nintendo Entertainment System Features Pt. 02.MP4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.400000
Video Position: 953

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,48,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,1,10,10,10,1
Style: 英文,Arial,48,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1,2,2,10,10,84,1
Style: 中文,Arial,72,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1,2,2,10,10,8,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:04.87,Default,,0,0,0,,{\fad(0,500)}{\pos(15,1057)}翻译：1149761294
Dialogue: 0,0:00:00.21,0:00:05.10,中文,,0,0,0,,该视频是关于SNES原理系列的第二部分
Dialogue: 0,0:00:05.10,0:00:12.62,中文,,0,0,0,,我们将讨论对象是什么 对象的属性如何存储 和其他相关内容
Dialogue: 0,0:00:12.62,0:00:17.83,中文,,0,0,0,,首先 科普一些术语
Dialogue: 0,0:00:17.83,0:00:20.91,中文,,0,0,0,,这听起来有点迂腐 但这就是这样
Dialogue: 0,0:00:20.91,0:00:23.28,中文,,0,0,0,,这些在屏幕上移动的东西叫什么？
Dialogue: 0,0:00:23.28,0:00:28.96,中文,,0,0,0,,大多数人会说这些是精灵 这种说法从不同方面看时对时错
Dialogue: 0,0:00:28.96,0:00:30.52,中文,,0,0,0,,这些东西有三个部分
Dialogue: 0,0:00:30.52,0:00:34.35,中文,,0,0,0,,精灵 其他的精灵 和对象
Dialogue: 0,0:00:34.35,0:00:37.64,中文,,0,0,0,,实体的抽象通常被叫做精灵
Dialogue: 0,0:00:37.64,0:00:41.88,中文,,0,0,0,,在现代编程语言(尤其是面向对象语言)中 他们被称为对象
Dialogue: 0,0:00:41.88,0:00:44.78,中文,,0,0,0,,这就更让人困惑了
Dialogue: 0,0:00:44.78,0:00:49.23,中文,,0,0,0,,我们也可以把驱动这个东西的代码看作是精灵指令
Dialogue: 0,0:00:49.23,0:00:54.76,中文,,0,0,0,,精灵用来向玩家展示自己的图形通常也被称为精灵
Dialogue: 0,0:00:54.76,0:01:00.44,中文,,0,0,0,,图片搜索关键词“sprite sheet”可以得到一堆不同游戏中的精灵图像
Dialogue: 0,0:01:00.44,0:01:06.82,中文,,0,0,0,,至于SNES的图形方式 它需要一个对象列表并显示在屏幕上
Dialogue: 0,0:01:06.82,0:01:13.53,中文,,0,0,0,,由于对象的大小和形状非常有限 对象组合在一起才可以组成精灵
Dialogue: 0,0:01:13.53,0:01:18.34,中文,,0,0,0,,好了 这些都讲完了 对象到底是什么呢？
Dialogue: 0,0:01:18.34,0:01:22.99,中文,,0,0,0,,任何可以独立于背景图层移动的小图像都是对象
Dialogue: 0,0:01:22.99,0:01:27.57,中文,,0,0,0,,对象使用的图形的深度总是4BPP
Dialogue: 0,0:01:27.57,0:01:30.22,中文,,0,0,0,,而且使用8~15共8个调色板之一
Dialogue: 0,0:01:30.22,0:01:37.32,中文,,0,0,0,,它们的大小可以是8x8 16x16 32x32或64x64像素
Dialogue: 0,0:01:37.32,0:01:42.85,中文,,0,0,0,,16x32和32x64也可以 但不是任天堂官方支持的
Dialogue: 0,0:01:42.85,0:01:47.90,中文,,0,0,0,,屏幕上同时只能显示两种尺寸
Dialogue: 0,0:01:47.90,0:01:50.25,中文,,0,0,0,,因为每个对象只知道自己是“大”还是“小”
Dialogue: 0,0:01:50.25,0:01:54.61,中文,,0,0,0,,每个对象需要34位数据来确定其所有属性
Dialogue: 0,0:01:54.61,0:01:58.13,中文,,0,0,0,,3位数据表示对象使用的是哪一个调色板
Dialogue: 0,0:01:58.13,0:02:03.03,中文,,0,0,0,,9位数据用于索引VRAM以显示图形块
Dialogue: 0,0:02:03.03,0:02:07.93,中文,,0,0,0,,如果对象大于8x8像素 那么其它相邻的被用到图块
Dialogue: 0,0:02:07.93,0:02:13.28,中文,,0,0,0,,会通过横向+0x01 纵向+0x10来得到
Dialogue: 0,0:02:13.28,0:02:18.20,中文,,0,0,0,,1位被用来确定对象的大小 1位被用来确定是否垂直翻转
Dialogue: 0,0:02:18.20,0:02:20.33,中文,,0,0,0,,1位被用来确定是否水平翻转
Dialogue: 0,0:02:20.33,0:02:24.31,中文,,0,0,0,,2位被用来确定对象的优先级
Dialogue: 0,0:02:24.31,0:02:28.35,中文,,0,0,0,,优先级较高的对象会显示在优先级低的对象的上面
Dialogue: 0,0:02:28.35,0:02:31.69,中文,,0,0,0,,以及某些背景图层
Dialogue: 0,0:02:31.69,0:02:35.71,中文,,0,0,0,,最后17位被用来确定对象在屏幕上的位置
Dialogue: 0,0:02:35.71,0:02:40.90,中文,,0,0,0,,屏幕大小是256x224像素
Dialogue: 0,0:02:40.90,0:02:46.51,中文,,0,0,0,,对象的坐标系原点是画面的左上角
Dialogue: 0,0:02:46.51,0:02:51.76,中文,,0,0,0,,所以你可能认为我们需要8位横坐标+8位纵坐标就够了
Dialogue: 0,0:02:51.76,0:02:55.81,中文,,0,0,0,,那样基本可以 但是屏幕左侧和上侧会有一个问题
Dialogue: 0,0:02:55.81,0:03:00.12,中文,,0,0,0,,如果只有8位 物体可以部分跑到屏幕的右边缘外面
Dialogue: 0,0:03:00.12,0:03:01.68,中文,,0,0,0,,但是左边不行
Dialogue: 0,0:03:01.68,0:03:07.95,中文,,0,0,0,,所以多出的1位用于扩展x轴 使物体也可以部分跑到左侧外面
Dialogue: 0,0:03:07.95,0:03:13.09,中文,,0,0,0,,对于Y轴来说 这不是一个大问题 因为屏幕只有224像素高
Dialogue: 0,0:03:13.09,0:03:18.59,中文,,0,0,0,,然而 较大的对象不能在不在另一侧露出来的情况下
Dialogue: 0,0:03:18.59,0:03:21.86,中文,,0,0,0,,在屏幕的顶部或底部部分显示
Dialogue: 0,0:03:21.86,0:03:26.37,中文,,0,0,0,,所有的这些数据都存储在对象属性内存中(OAM)
Dialogue: 0,0:03:26.37,0:03:33.45,中文,,0,0,0,,这是一小块内存 只有544字节 与CGRAM VRAM WRAM是分开的
Dialogue: 0,0:03:33.45,0:03:38.14,中文,,0,0,0,,它的空间足够储存128个不同对象的属性
Dialogue: 0,0:03:38.14,0:03:42.26,中文,,0,0,0,,它分为两个表 我们称它们为表A和表B
Dialogue: 0,0:03:42.26,0:03:46.19,中文,,0,0,0,,在表A中 每个对象条目32位宽(4字节)
Dialogue: 0,0:03:46.19,0:03:53.37,中文,,0,0,0,,这里储存了翻转 优先级 调色板 图块号 纵坐标 和低8位横坐标
Dialogue: 0,0:03:53.37,0:03:58.34,中文,,0,0,0,,这些通常称为X位置 Y位置 图块和属性字节
Dialogue: 0,0:03:58.34,0:04:02.79,中文,,0,0,0,,图块号的最高位有时被称为精灵页码
Dialogue: 0,0:04:02.79,0:04:07.98,中文,,0,0,0,,因为它与其他属性混合在一起 并确定对象使用的是前256个图块
Dialogue: 0,0:04:07.98,0:04:11.30,中文,,0,0,0,,还是后面256个图块
Dialogue: 0,0:04:11.30,0:04:15.15,中文,,0,0,0,,在表B中 每个对象条目2位宽
Dialogue: 0,0:04:15.15,0:04:19.60,中文,,0,0,0,,X位置的高位 和 图块的尺寸
Dialogue: 0,0:04:19.60,0:04:24.13,中文,,0,0,0,,当将对象绘制到屏幕上时 有一些事情需要记住
Dialogue: 0,0:04:24.13,0:04:28.96,中文,,0,0,0,,OAM中排前面的对象优先于具有相同优先级的后续对象
Dialogue: 0,0:04:29.96,0:04:35.05,中文,,0,0,0,,对象0在上面 对象127在下面
Dialogue: 0,0:04:35.05,0:04:39.43,中文,,0,0,0,,但是存在一个对象优先级旋转特性 它决定在上面绘制哪个对象
Dialogue: 0,0:04:39.43,0:04:42.24,中文,,0,0,0,,就像对象0一样
Dialogue: 0,0:04:42.24,0:04:46.08,中文,,0,0,0,,当对象在重叠时发生闪烁时 这是非常有用的
Dialogue: 0,0:04:46.08,0:04:48.77,中文,,0,0,0,,处理一些必要的的改组
Dialogue: 0,0:04:48.77,0:04:54.18,中文,,0,0,0,,有共128个对象的限制 也有一些其他的限制
Dialogue: 0,0:04:54.18,0:04:59.08,中文,,0,0,0,,在同一扫描线上最多只能看到32个对象
Dialogue: 0,0:04:59.08,0:05:03.98,中文,,0,0,0,,当超过32个时 只取最高优先级的32个 其他的则被丢弃
Dialogue: 0,0:05:04.98,0:05:10.72,中文,,0,0,0,,此外 同一扫描线上最多只能看到34个8x8的图块
Dialogue: 0,0:05:10.72,0:05:14.31,中文,,0,0,0,,如果有更多 一样 只有高优先级的会被绘制
Dialogue: 0,0:05:14.31,0:05:19.16,中文,,0,0,0,,这可能导致对象只绘制一部分 尤其是大尺寸的
Dialogue: 0,0:05:19.16,0:05:22.30,中文,,0,0,0,,所有的128个对象在每一帧都绘制
Dialogue: 0,0:05:22.30,0:05:27.62,中文,,0,0,0,,有意丢弃对象的官方方法是 将他们移除屏幕就不会被看到了
Dialogue: 0,0:05:27.62,0:05:31.56,中文,,0,0,0,,小的物体可以放置在屏幕下方 但大的物体需要放置在左侧或右侧
Dialogue: 0,0:05:31.56,0:05:36.58,中文,,0,0,0,,因为屏幕上方的缓冲区太小
Dialogue: 0,0:05:36.58,0:05:38.44,中文,,0,0,0,,一如既往 谢谢您的观看
Dialogue: 0,0:05:38.44,0:05:42.28,中文,,0,0,0,,下次我们将讨论背景层并介绍一些渲染细节
Dialogue: 0,0:00:00.21,0:00:05.10,英文,,0,0,0,,This video is part 2 in a series about Super Nintendo Entertainment System features.
Dialogue: 0,0:00:05.10,0:00:09.23,英文,,0,0,0,,We'll talk about what objects are, how Object Attribute Memory works, and everything else
Dialogue: 0,0:00:09.23,0:00:12.62,英文,,0,0,0,,object related.
Dialogue: 0,0:00:12.62,0:00:17.83,英文,,0,0,0,,First, a little bit of terminology needs cleared up.
Dialogue: 0,0:00:17.83,0:00:20.91,英文,,0,0,0,,This is going to sound a little pedantic, but that's because it is.
Dialogue: 0,0:00:20.91,0:00:23.28,英文,,0,0,0,,What are these things that move around the screen called?
Dialogue: 0,0:00:23.28,0:00:27.96,英文,,0,0,0,,Most people would say that these are sprites, and that's both correct and incorrect in different
Dialogue: 0,0:00:27.96,0:00:28.96,英文,,0,0,0,,ways.
Dialogue: 0,0:00:28.96,0:00:30.52,英文,,0,0,0,,There are three parts to these things.
Dialogue: 0,0:00:30.52,0:00:34.35,英文,,0,0,0,,The sprite, the other sprite, and the objects.
Dialogue: 0,0:00:34.35,0:00:37.64,英文,,0,0,0,,The abstract being of this entity is often called a sprite.
Dialogue: 0,0:00:37.64,0:00:41.88,英文,,0,0,0,,In modern programming languages (especially object-oriented ones), these would be called
Dialogue: 0,0:00:41.88,0:00:44.78,英文,,0,0,0,,objects, which makes this even more confusing.
Dialogue: 0,0:00:44.78,0:00:49.23,英文,,0,0,0,,We can also think of the code that drives this thing as the sprite instructions.
Dialogue: 0,0:00:49.23,0:00:53.65,英文,,0,0,0,,The graphics that a sprite uses to display itself to the player is also commonly called
Dialogue: 0,0:00:53.65,0:00:54.76,英文,,0,0,0,,a sprite.
Dialogue: 0,0:00:54.76,0:00:59.06,英文,,0,0,0,,Doing an image search for 'sprite sheet' results in a bunch of different sprites from different
Dialogue: 0,0:00:59.06,0:01:00.44,英文,,0,0,0,,games.
Dialogue: 0,0:01:00.44,0:01:05.50,英文,,0,0,0,,As for what the Super Nintendo sees graphics-wise, it takes a list of objects and displays them
Dialogue: 0,0:01:05.50,0:01:06.82,英文,,0,0,0,,on the screen.
Dialogue: 0,0:01:06.82,0:01:13.53,英文,,0,0,0,,Combined together, objects can make up sprites, as the size and shape of objects is very limited.
Dialogue: 0,0:01:13.53,0:01:18.34,英文,,0,0,0,,Okay, with that out of the way, what exactly are objects?
Dialogue: 0,0:01:18.34,0:01:22.99,英文,,0,0,0,,Any small graphic that can move independently of the background layers is an object.
Dialogue: 0,0:01:22.99,0:01:27.57,英文,,0,0,0,,The graphics that objects use always have a depth of 4 bits-per-pixel, and can use one
Dialogue: 0,0:01:27.57,0:01:30.22,英文,,0,0,0,,of the eight palettes from 8-15.
Dialogue: 0,0:01:30.22,0:01:37.32,英文,,0,0,0,,They can be either 8x8, 16x16, 32x32, or 64x64 pixels in size.
Dialogue: 0,0:01:37.32,0:01:42.85,英文,,0,0,0,,16x32 and 32x64 is also possible, but weren't officially supported by Nintendo.
Dialogue: 0,0:01:42.85,0:01:47.90,英文,,0,0,0,,Only two sizes can be present on screen at one time, as each object only knows whether
Dialogue: 0,0:01:47.90,0:01:50.25,英文,,0,0,0,,it should be 'big' or 'small'.
Dialogue: 0,0:01:50.25,0:01:54.61,英文,,0,0,0,,Each object requires 34 bits to determine all of its properties.
Dialogue: 0,0:01:54.61,0:01:58.13,英文,,0,0,0,,Three bits are used to denote which palette the object is using.
Dialogue: 0,0:01:58.13,0:02:03.03,英文,,0,0,0,,Nine bits are used to index into VRAM which graphics tiles to display.
Dialogue: 0,0:02:03.03,0:02:07.93,英文,,0,0,0,,If the object is larger than 8x8, the other tiles that are used are found by adding 1
Dialogue: 0,0:02:07.93,0:02:13.28,英文,,0,0,0,,to the value to get horizontal neighbors, and 0x10 to get vertical neighbors.
Dialogue: 0,0:02:13.28,0:02:18.20,英文,,0,0,0,,One bit is used to determine the object's size, one is used to flip the object vertically,
Dialogue: 0,0:02:18.20,0:02:20.33,英文,,0,0,0,,and one is used to flip it horizontally.
Dialogue: 0,0:02:20.33,0:02:24.31,英文,,0,0,0,,Two bits are used to specify the object's priority.
Dialogue: 0,0:02:24.31,0:02:28.35,英文,,0,0,0,,Objects with higher priority are displayed on top of other objects with lower priority,
Dialogue: 0,0:02:28.35,0:02:31.69,英文,,0,0,0,,as well as above certain background layers.
Dialogue: 0,0:02:31.69,0:02:35.71,英文,,0,0,0,,The last 17 bits are used for the object's position on the screen.
Dialogue: 0,0:02:35.71,0:02:40.90,英文,,0,0,0,,The object display screen size is 256x224 pixels.
Dialogue: 0,0:02:40.90,0:02:45.51,英文,,0,0,0,,The position of objects are based off of their top left corner relative to the top left corner
Dialogue: 0,0:02:45.51,0:02:46.51,英文,,0,0,0,,of the display area.
Dialogue: 0,0:02:46.51,0:02:51.76,英文,,0,0,0,,So you might think we would need 8+8 bits to span all of screen space.
Dialogue: 0,0:02:51.76,0:02:55.81,英文,,0,0,0,,That would be close, but there's an issue with the left and top edges of the screen.
Dialogue: 0,0:02:55.81,0:03:00.12,英文,,0,0,0,,With only 8 bits, an object could be partially off of the screen on the right edge, but not
Dialogue: 0,0:03:00.12,0:03:01.68,英文,,0,0,0,,the left edge.
Dialogue: 0,0:03:01.68,0:03:06.04,英文,,0,0,0,,So an extra bit is used for the X axis, so that an object can be partially off the left
Dialogue: 0,0:03:06.04,0:03:07.95,英文,,0,0,0,,side of the screen as well.
Dialogue: 0,0:03:07.95,0:03:13.09,英文,,0,0,0,,This isn't as big of an issue for the Y axis, since the screen is only 224 pixels high instead
Dialogue: 0,0:03:13.09,0:03:18.59,英文,,0,0,0,,of 256; however, larger objects can't clip off of the top or bottom of the screen without
Dialogue: 0,0:03:18.59,0:03:21.86,英文,,0,0,0,,wrapping around the other side.
Dialogue: 0,0:03:21.86,0:03:26.37,英文,,0,0,0,,All of this data is stored in Object Attribute Memory, or OAM.
Dialogue: 0,0:03:26.37,0:03:32.07,英文,,0,0,0,,This is a small chunk of memory, only 544 bytes, that is separate from CGRAM, VRAM,
Dialogue: 0,0:03:32.07,0:03:33.45,英文,,0,0,0,,or WRAM.
Dialogue: 0,0:03:33.45,0:03:38.14,英文,,0,0,0,,It has enough room to store attributes for 128 different objects.
Dialogue: 0,0:03:38.14,0:03:42.26,英文,,0,0,0,,It's split into two tables, we'll call them table A and table B.
Dialogue: 0,0:03:42.26,0:03:46.19,英文,,0,0,0,,In table A, each object has an entry 32 bits wide.
Dialogue: 0,0:03:46.19,0:03:51.51,英文,,0,0,0,,Here is stored the flipping, prioriy, palette, tile number, Y position, and the lower 8 bits
Dialogue: 0,0:03:51.51,0:03:53.37,英文,,0,0,0,,of the X position.
Dialogue: 0,0:03:53.37,0:03:58.34,英文,,0,0,0,,These are commonly known as the X position, Y position, tile, and attribute bytes.
Dialogue: 0,0:03:58.34,0:04:02.79,英文,,0,0,0,,The highest bit of the tile number is sometimes known as the sprite page number, since it's
Dialogue: 0,0:04:02.79,0:04:07.98,英文,,0,0,0,,mixed with the other attributes and determines if the object uses a tile from the first 256
Dialogue: 0,0:04:07.98,0:04:11.30,英文,,0,0,0,,tiles or the last 256.
Dialogue: 0,0:04:11.30,0:04:15.15,英文,,0,0,0,,In table B, each object has an entry 2 bits wide.
Dialogue: 0,0:04:15.15,0:04:19.60,英文,,0,0,0,,The highest bit of the X position and the tile's size are stored here.
Dialogue: 0,0:04:19.60,0:04:24.13,英文,,0,0,0,,When drawing the objects onto the screen, there are a few things to keep in mind.
Dialogue: 0,0:04:24.13,0:04:28.96,英文,,0,0,0,,The objects earlier in OAM are prioritized over later objects with the same priority bits.
Dialogue: 0,0:04:29.96,0:04:35.05,英文,,0,0,0,,Normally object 0 is on top, and object 127 is on the bottom.
Dialogue: 0,0:04:35.05,0:04:39.43,英文,,0,0,0,,But there exists an object priority rotation feature, which determines witch object is
Dialogue: 0,0:04:39.43,0:04:42.24,英文,,0,0,0,,drawn on top, acting like object 0.
Dialogue: 0,0:04:42.24,0:04:46.08,英文,,0,0,0,,This is useful for when objects should flicker when overlapping, and takes care of some of
Dialogue: 0,0:04:46.08,0:04:48.77,英文,,0,0,0,,the shuffling that would be necessary to implement that.
Dialogue: 0,0:04:48.77,0:04:54.18,英文,,0,0,0,,There is a limit of 128 objects in total, but there are also some other limitations.
Dialogue: 0,0:04:54.18,0:04:59.08,英文,,0,0,0,,There can only be a maximum of 32 objects visible on a given scan line.
Dialogue: 0,0:04:59.08,0:05:03.98,英文,,0,0,0,,When there are more than 32, only the highest priority 32 are drawn, and the others are
Dialogue: 0,0:05:03.98,0:05:04.98,英文,,0,0,0,,discarded.
Dialogue: 0,0:05:04.98,0:05:10.72,英文,,0,0,0,,In addition, there can only be a maximum of 34 8x8 tiles visible on a given scan line.
Dialogue: 0,0:05:10.72,0:05:14.31,英文,,0,0,0,,When there are more, again, only the highest priority ones are drawn.
Dialogue: 0,0:05:14.31,0:05:19.16,英文,,0,0,0,,This can result in an object only being half drawn, especially if it's of large size.
Dialogue: 0,0:05:19.16,0:05:22.30,英文,,0,0,0,,All 128 objects are drawn on every frame.
Dialogue: 0,0:05:22.30,0:05:26.34,英文,,0,0,0,,The official way of purposefully discarding an object is to move it offscreen so it can't
Dialogue: 0,0:05:26.34,0:05:27.62,英文,,0,0,0,,be seen.
Dialogue: 0,0:05:27.62,0:05:31.56,英文,,0,0,0,,Smaller objects can be placed below the screen, but larger ones need to be placed to the left
Dialogue: 0,0:05:31.56,0:05:36.58,英文,,0,0,0,,or right since the buffer zone above the screen is too small.
Dialogue: 0,0:05:36.58,0:05:38.44,英文,,0,0,0,,As always, thank you for watching.
Dialogue: 0,0:05:38.44,0:05:42.28,英文,,0,0,0,,Next time we'll talk about background layers and introduce some rendering specifics.
